JavaScript 

!!!!!!자료구조!!!!!!
--Array(배열)--
 array클래스는 리스트 형태의 고수준 객체인 배열을 생성할 때 사용하는 전역 객체입니다.

1. index값 0,1,2
 let a = ['java', 'spring', 55];
 a[0] = 'java'

--LinkedList--
 object(객체) : 여러 값을 저장한 자료형(data type)
   {} : object를 만들때 사용
   {name: "property"} 순서가 없고 이름을 이용하여 사용 

  let b = { lang: 'java', frame: 'spring', age: 55 };


  값을 읽을 때 []안에 string 형태로 property 사용
  console.log(b['lang']);
  console.log(b['frame']);
  console.log(b['age']);
   //위 형태로는 자주사용하지 않음

  console.log(b.lang);
  console.log(b.frame);
  console.log(b.age);
   //대부분 위 형태로 사용

property는 변수 작성 형식으로 작성


---function(함수)---
작성방법
function 함수이름(파라미터1, 파라미터2) {코드블럭}
작성, 정의, 선언
실행방법
함수명(아규먼트1, 아규먼트2);
함수실행(execute), 함수호출(Call, invoke)
*코드블럭 안에서 함수가 정의 될 수 있으나 외부에서 사용불가능(변수의 scope과 동일)

return
        //함수의 실행결과
            // 결과 값을 return(반환)
1. 오른쪽 값을 반환한다
        //         2. 리턴키워드를 반환함과 동시에 함수를 종료한다. 
function내부 return;이후의 코드는 실행되지 않음


--javascript--
- first-class function-
 1. 인수로 전달 가능
 2. 값으로 반환가능
 3. 변수에 할당가능
 4. 데이터 구조에 저장가능
    

1. 변수에 할당
        function a() {
            console.log("a라는 함수가 실행하는 코드들..");
        }
        let b;
        b = a; // a라는 함수를 b로 대입

        a();
        b();

2.인수로 전달
        function a() {
            console.log("a함수 실행");
        }
        function b(param) {
            console.log(param);
            param();
        }
        /* b('hello') */
        b(a) // 인수로 전달
3. 값으로 반환 가능
        function a() {
            function b() {
                console.log("b함수 실행");
            }
            return b;
        }
        a(); // b값을 반환만 받았기때문에 콘솔에 찍히는 내용없음.
        let c = a(); 
        c(); // 반환 받은 값을 실행
4. 데이터 구조에 저장
        function a() {
            console.log("a함수 실행");
        }
        let b = a;
        b();

        let c = [3, "hello", a]
        console.log(c[0]);
        console.log(c[1]);
        console.log(c[2]);

        c[2]();
    

